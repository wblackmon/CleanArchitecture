@page "/leavetypes"
@using CleanArchitecture.UI.Contracts
@using CleanArchitecture.UI.Models.LeaveTypes
@inject NavigationManager NavigationManager

<h3>Leave Types</h3>

<div class="m-2 d-flex justify-content-end">
    <button @onclick="CreateLeaveType" class="btn btn-success">Add Leave Type</button>
</div>

@if(string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger" role="alert">
        @Message
    </div>
}

@if (LeaveTypes == null)
{
    <p>Loading Data...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Leave Type</th>
                <th>Default Days</th>
                <th>Default Days</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var leaveType in LeaveTypes)
            {
                <tr>
                    <td>@leaveType.Name</td>
                    <td>@leaveType.DefaultDays</td>
                    <td>@leaveType.DefaultDays</td>
                    <td>
                        <button @onclick="@(() => AllocateLeaveType(leaveType.Id))" class="btn btn-dark">Allocate Leave</button>
                        <button @onclick="@(() => EditLeaveType(leaveType.Id))" class="btn btn-warning">Edit</button>
                        <button @onclick="@(() => DeleteLeaveType(leaveType.Id))" class="btn btn-danger">Delete</button>
                        <button @onclick="@(() => DetailsLeaveType(leaveType.Id))" class="btn btn-info">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    //[Inject]
    //public NavigationManager NavigationManager { get; set; }
    [Inject]
    public ILeaveTypeService LeaveTypeService { get; set; }
    //[Inject]
    //public ILeaveAllocationService LeaveAllocationService { get; set; }

    public IEnumerable<LeaveTypeVm> LeaveTypes { get; set; }
    public string Message { get; set; } = string.Empty;

    protected void AllocateLeaveType(int id)
    {
        //LeaveAllocationService.CreateLeaveAllocations(id);
    }

    protected void EditLeaveType(int id)
    {
        NavigationManager.NavigateTo($"/leavetypes/edit/{id}");
    }

    protected async void DeleteLeaveType(int id)
    {
        var response = await LeaveTypeService.DeleteLeaveType(id);
        if (response.Success)
        {
            StateHasChanged();
        }
        else
        {
            Message = response.Message; 
        }
    }

    protected void DetailsLeaveType(int id)
    {
        NavigationManager.NavigateTo($"leavetypes/details/{id}");
    }

    private void CreateLeaveType(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("/leavetypes/create");
    }

    protected override async Task OnInitializedAsync()
    {
        LeaveTypes = await LeaveTypeService.GetLeaveTypes();
    }

}

